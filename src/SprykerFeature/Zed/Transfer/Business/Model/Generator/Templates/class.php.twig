<?php

namespace {{ namespace }};

use SprykerFeature\Shared\Library\TransferObject\AbstractTransfer;
{% for ue in useExternal %}
use {{ ue }};
{% endfor %}

/**
 * Class {{ className }}
 *
 * @author SprykerGenerator
 */
class {{ className }} extends AbstractTransfer implements {{ interfacesToImplement }}
{
    {% for prop in properties %}

    /**
     * @var {{ writeIfNot(prop.parameterDataType ~ ' ', '(^string|^int)', prop.parameterDataType) }}${{ prop.propertyName }}
     */
    protected ${{ prop.propertyName }}{% if prop.defaultValue is defined and prop.defaultValue != '' %} = {{ prop.defaultValue }}{% endif %};
    {% endfor %}

    {% for sag in settersAndGetters %}

    /**
     * @var {{ writeIfNot(sag.parameterDataType ~ ' ', '(^array|^string|^int)', sag.parameterDataType) }}${{ sag.passedParameter }}
     */
    public function set{{ sag.propertyName }}({{ writeIfNot(sag.parameterDataType ~ ' ', '(^array|^string|^int)', sag.parameterDataType) }}${{ sag.passedParameter }})
    {
        $this->{{ sag.passedParameter }}{{ writeIf('[]', 'array', sag.parameterDataType) }} = ${{ sag.passedParameter }};
        $this->addModifiedProperty('{{ sag.passedParameter }}');

        return $this;
    }

    /**
    * @return {{ writeIfNot(sag.parameterDataType ~ ' ', '(^string|^int)', sag.parameterDataType) }}${{ sag.passedParameter }}
    */
    public function get{{ sag.propertyName }}()
    {
        return $this->{{ sag.passedParameter }};
    }
    {% endfor %}

}
